#!/usr/bin/env node


let path = require("path")
let fs = require("fs")
var program = require('commander');
const home = require('user-home')
const inquirer = require('inquirer')
const Ask=require("../../lib/ask")
const fileHandle=require("../../lib/fileHandle")
const download=require("../../lib/download")
const resolve=require("../../lib/pathRoot").resolve
program
  .usage('<template-name> [project-name]')
  .parse(process.argv);

// 入口
function main(){
    if(program.args[2]=="[object Object]"){
      run()
    }else{
      let str=
  `
  注意创建项目格式：

  template-name:

      webpack：自动集成了所有的配置，在创建项目时，以询问的方式进行项目配置
      normal：可以添加任何一种react模板，不具备创建项目时的询问

  #创建项目：

      vuebw init <template-name> [project-name]

  example:

      vuebw init webpack vueTest
  
      vuebw init normal vueTest
  `
        console.log(str)
    }
}

main()

async function run(){

    switch(program.args[0]){
        case "webpack":{
            var templateReadPath=path.join(__dirname,"../../template/vue/webpack")
        } break;
        case "normal":{
            var templateReadPath=path.join(__dirname,"../../template/vue/normal")
           
        } break;
    }



   let config=await Ask(program,"vue",templateReadPath)
  
   let templatePath=path.join(templateReadPath,config["vue-project-type"])
   await download(templatePath)

   let amendPack=await amendPackage(config)
   program.args[0]=="webpack"?await amendProjectConfig(config):null
}


// // 修改package.json文件

function amendPackage(config){
    let amendConfig={
      name:config.name,
      author:config.author,
      description:config.description,
      email:config.email,
    }
    return fileHandle.amendJson(amendConfig)
}

async function amendProjectConfig(config){
  let amendConfig={
    type:config.device,
    width:config.deviceWidth,
    host:config.host,
    port:config.port,
    publicPath:`http://${config.host}:${config.port}/`,
    browserOpen: config.browserOpen,
    devtool:config.devtool=="false"?false:config.devtool,
    esLintUse:config.esLint,
    cssType:config.cssType=="false"?false:config.cssType
  }
  
  Object.assign(amendConfig,testMock(config))

    await fileHandle.amendConfig(amendConfig)
  if(!config.mock){
    await fileHandle.delDir(resolve("mock"))
  }
 
}


function testMock(config){
  if(!config.mock){
    return {before:null}
  }
}

