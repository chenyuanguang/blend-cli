#!/usr/bin/env node


let path = require("path")
let fs = require("fs")
var program = require('commander');
const inquirer = require('inquirer')
const home = require('user-home')
const Ask=require("../../lib/ask")
const fileHandle=require("../../lib/fileHandle")
const download=require("../../lib/download")
const resolve=require("../../lib/pathRoot").resolve
program
  .usage('<template-name> [project-name]')
  .parse(process.argv);


  function main(){
      if(program.args[2]=="[object Object]"){
        run()
      }else{
        let str=
    `
    注意创建项目格式：

    template-name:

        webpack：自动集成了所有的配置，在创建项目时，以询问的方式进行项目配置
        normal：可以添加任何一种react模板，不具备创建项目时的询问

    #创建项目：

        reactcli init <template-name> [project-name]

    example:

        reactcli init webpack reactTest
        
        reactcli init normal reactTest

    #注：

        使用antd时，在config/config.js的babel：plugin中添加如下配置：

        ["import", { 
            "libraryName": "antd",
            "libraryDirectory": "es", 
            "style": "css" 
          }]

        使用antd-mobile时，在config/config.js的babel：plugin中添加如下配置：

        ["import", {
            libraryName: "antd-mobile",
            style: true,
        }]

    `
          console.log(str)
      }
  }

main()


// 入口

async function run(){
    switch(program.args[0]){
        case "webpack":{
            
            var templateReadPath=path.join(__dirname,"../../template/react/webpack")
        } break;
        case "normal":{
            var templateReadPath=path.join(__dirname,"../../template/react/normal")
        } break;
    }
    
    let config=await Ask(program,"react",templateReadPath)
    let templatePath=path.join(templateReadPath,config["react-project-type"])
   await download(templatePath)
   await amendPackage(config)
   program.args[0]=="webpack"?await amendProjectConfig(config):null
}



// // 修改package.json文件

function amendPackage(config){
    let amendConfig={
      name:config.name,
      author:config.author,
      description:config.description,
      email:config.email,
    }
    return fileHandle.amendJson(amendConfig)
}

async function amendProjectConfig(config){
  let amendConfig={
    type:config.device,
    width:config.deviceWidth,
    host:config.host,
    port:config.port,
    publicPath:`http://${config.host}:${config.port}/`,
    browserOpen: config.browserOpen,
    devtool:config.devtool=="false"?false:config.devtool,
    esLintUse:config.esLint,
    cssType:config.cssType=="false"?false:config.cssType
  }
  
  Object.assign(amendConfig,testMock(config))

    await fileHandle.amendConfig(amendConfig)
  if(!config.mock){
    await fileHandle.delDir(resolve("mock"))
  }
 
}


function testMock(config){
  if(!config.mock){
    return {before:null}
  }
}



